from rest_framework import mixins, viewsets, permissions
from rest_framework.filters import SearchFilter, OrderingFilter
from django_filters.rest_framework import DjangoFilterBackend
from django.contrib.auth import get_user_model
from apps.todo.models import Todo
from rest_framework.exceptions import PermissionDenied 
from apps.todo.serializers import TodoSerializer, UserSerializer

User = get_user_model()

class BaseMixin(viewsets.GenericViewSet,
                mixins.ListModelMixin,
                mixins.CreateModelMixin,
                mixins.DestroyModelMixin,
                mixins.UpdateModelMixin,
                mixins.RetrieveModelMixin):
    
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]

class TodoMixin(BaseMixin):
    """Mixin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    queryset = Todo.objects.all()
    serializer_class = TodoSerializer
    permission_classes = [permissions.IsAuthenticated]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø

    search_fields = ['title', 'description']
    ordering_fields = ['created_at']
    ordering = ['-created_at']

    def get_queryset(self):
        """–§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏: –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏"""
        user = self.request.user
        if user.is_staff:  # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å—ë
            return Todo.objects.all()
        return Todo.objects.filter(user=user)

    def perform_create(self, serializer):
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–æ –¥–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∞–º —É–∫–∞–∑—ã–≤–∞—Ç—å ID"""
        if self.request.user.is_staff and 'user' in self.request.data:
            serializer.save()  # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            serializer.save(user=self.request.user)  # –û–±—ã—á–Ω—ã–π —é–∑–µ—Ä —Å–æ–∑–¥–∞—ë—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è

    def perform_destroy(self, instance):
        """–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª—è—é—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏, –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –ª—é–±—É—é"""
        user = self.request.user
        if user.is_staff or instance.user == user:
            instance.delete()
        else:
            raise PermissionDenied("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É.")  # –¢–µ–ø–µ—Ä—å –±–µ–∑ –æ—à–∏–±–æ–∫! üöÄ


class UserMixin(BaseMixin):
    """Mixin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    queryset = User.objects.all()
    serializer_class = UserSerializer

    search_fields = ['username', 'phone_number']
    ordering_fields = ['created_at']
    ordering = ['-created_at']




